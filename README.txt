JMScript_Detail - программа для работы с файлами скриптов Apache Jmeter.
Данное приложение позволяет собирать и группировать данные форм (сэмплеров),
а также изменять значение параметров форм для всей группы, где встречается нужный 
параметер формы.

Внимание!!! При запуске приложения на другом дистрибутиве linux появилась ошибка при работе с пакетом tix из tkinter.
Сам пакет стандартно есть в tkinter, он импортируется нормально, а tkinter тоже является стандартным пакетом в python.
Это баг самого tix.
Для raspbian (debian) исправилось так:
sudo apt-get install tix-dev.
Под windows 10 запустилось корректно.

Краткая инструкция:
    
    1. Необходимо указать в переменной setClassDir класса JMScript_Detail актуальный
    путь к каталогу, где находится данный класс.
    
    2. Далее следует перейти в каталог, где лежит данный класс, и запустить приложение 
    инструкцией вида: python runJMScriptDetail.py.
    
    3. В форме необходимо указать путь к каталогу, где находится xml-файл со скриптом (*.jmx)
    
    4. Далее необходимо собрать файлы *.jmx, должен появится список таких файлов.
    
    5. Необходимо указать в поле нужный файл (из списка) для параметризации (можно двойным кликом по файлу из списка).
    
    6. Далее необходимо загрузить (получить) дерево из указанного файла.
    
    7. Нужно указать файл (произвольное название) для сохранения дерева с уникальными названиями 
    ThreadGroup и контроллеров.*
     
    8. Сгенерировать коллекцию с уникальными именами.
    
    9. Выбрать ThreadGroup и аккумулировать рабочую коллекцию.
    
    9.1. Важно! При завершении работы с ThreadGroup обязательно нужно обновить дерево, иначе при переходе к следующей ThreadGroup
    потрутся измениния в предыдущей. Также перед сохранением в файл (после редактирования всех ThreadGroup) необходимо обновить дерево.
    
    10.Далее можно работать с основной (рабочей) коллекцией.

    10.1. Есть возможность автовыбора значения из списка элементов, чекбокс Авто выбор/Все знач. позволяет автозаполнять поля для операций 
    с элементами коллекции. Для этого нужно выбрать этот чексбокс и чекбокс элемента, при нажатии кнопки операции значение подтягивается.
    Внимание! В режиме работы правки элементов данный чексбокс служит для выбора всех элементов или отмены выбора. 
    Т.е. если выполнить операцию Все значения по ключу, то из этого списка ничего не будет подтягиваться, поскольку в данном списке отмечаются элементы для изменения.
    Чтобы не запутаться - в списках, где указывается значения элементов, автовыбор работать не будет, для остальных работает.
    Также если, например, в списке указаны только контроллеры, который не подходит для автозаполнения, то при автозаполнении просто подтянется ключ для этих котроллеров.     
    
    11.При работе с основной коллекцией обновление элементов списка 
    (отмечены чекбоксами в окне) доступно только в двух режимах: 
    "Все знач. по задан. ключу" и "Значен. для кл.-кнтр.-смпл."
    
    12.После того, как все изменения внесены (можно вносить многократно),
    необходимо обновить xml-дерево.
    
    13.Чтобы сохранить измененное дерево с уникальными именами (см. шаг 7),необходимо 
    записать изменения в файл.
    
    14.Чтобы измененное дерево сохранить с оригинальными названиями необходимо указать 
    файл с восстановленными элементами и нажать восстановление оригинальных имен.
    Т.е. нужно указать выходной файл (произвольно, *.jmx, чтобы потом можно было открыть в Jmeter),
    в последствии приложение вернет оригинальные названия котроллеров и ThreadGroup
    
    15.Чтобы начать цикл заново нужно заново получить дерево из указанного файла (см. шаг 6).    

-------
* Jmeter может работать с одинаковыми названиями и котроллеров и групп, чтобы идентифицировать параметр необходимо уникальное название контроллера,
такой механизм предусмотрен в приложении. Для удобства работы можно открыть сгенерированный файл с уникальными названиями в jmeter.